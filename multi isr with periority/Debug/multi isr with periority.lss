
multi isr with periority.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008ba  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001088  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098f  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000348  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054a  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ad  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d3  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_1>
   8:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_2>
   c:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 03 	call	0x6ea	; 0x6ea <main>
  8a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_inti>:
 */ 
#include "DIO.h"

void button_inti(char port,char pin)
{
	DIO_setpin_dir(port,pin,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setpin_dir>
}
  98:	08 95       	ret

0000009a <button_val>:

char button_val(char port,char pin)
{
	char status;
	status=DIO_pin_read(port,pin);
  9a:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_pin_read>
	return status;
  9e:	08 95       	ret

000000a0 <DIO_setpin_dir>:
 */ 
#include <avr/io.h>
#include "bitmask.h"
void DIO_setpin_dir(char port,char pin,char dir)
{
	switch(port)
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_setpin_dir+0x6>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <DIO_setpin_dir+0xe8>
  a6:	85 34       	cpi	r24, 0x45	; 69
  a8:	48 f4       	brcc	.+18     	; 0xbc <DIO_setpin_dir+0x1c>
  aa:	82 34       	cpi	r24, 0x42	; 66
  ac:	99 f1       	breq	.+102    	; 0x114 <DIO_setpin_dir+0x74>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_setpin_dir+0x14>
  b2:	4d c0       	rjmp	.+154    	; 0x14e <DIO_setpin_dir+0xae>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	09 f0       	breq	.+2      	; 0xba <DIO_setpin_dir+0x1a>
  b8:	83 c0       	rjmp	.+262    	; 0x1c0 <DIO_setpin_dir+0x120>
  ba:	0f c0       	rjmp	.+30     	; 0xda <DIO_setpin_dir+0x3a>
  bc:	82 36       	cpi	r24, 0x62	; 98
  be:	51 f1       	breq	.+84     	; 0x114 <DIO_setpin_dir+0x74>
  c0:	83 36       	cpi	r24, 0x63	; 99
  c2:	20 f4       	brcc	.+8      	; 0xcc <DIO_setpin_dir+0x2c>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_setpin_dir+0x2a>
  c8:	7b c0       	rjmp	.+246    	; 0x1c0 <DIO_setpin_dir+0x120>
  ca:	07 c0       	rjmp	.+14     	; 0xda <DIO_setpin_dir+0x3a>
  cc:	83 36       	cpi	r24, 0x63	; 99
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_setpin_dir+0x32>
  d0:	3e c0       	rjmp	.+124    	; 0x14e <DIO_setpin_dir+0xae>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	09 f0       	breq	.+2      	; 0xd8 <DIO_setpin_dir+0x38>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <DIO_setpin_dir+0x120>
  d8:	57 c0       	rjmp	.+174    	; 0x188 <DIO_setpin_dir+0xe8>
	{
		case 'A':
		case 'a':
		if(dir==1)
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <DIO_setpin_dir+0x58>
		{
			SET_BIT(DDRA,pin);
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_setpin_dir+0x4c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_setpin_dir+0x48>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret
		}
		else
		{
			CLC_BIT(DDRA,pin);
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_setpin_dir+0x66>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_setpin_dir+0x62>
 10a:	ba 01       	movw	r22, r20
 10c:	60 95       	com	r22
 10e:	62 23       	and	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(dir==1)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_setpin_dir+0x92>
		{
			SET_BIT(DDRB,pin);
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_setpin_dir+0x86>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_setpin_dir+0x82>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret
		}
		else
		{
			CLC_BIT(DDRB,pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setpin_dir+0xa0>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setpin_dir+0x9c>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(dir==1)
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <DIO_setpin_dir+0xcc>
		{
			SET_BIT(DDRC,pin);
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_setpin_dir+0xc0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_setpin_dir+0xbc>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret
		}
		else
		{
			CLC_BIT(DDRC,pin);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setpin_dir+0xda>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setpin_dir+0xd6>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(dir==1)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_setpin_dir+0x106>
		{
			SET_BIT(DDRD,pin);
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setpin_dir+0xfa>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setpin_dir+0xf6>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret
		}
		else
		{
			CLC_BIT(DDRD,pin);
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_setpin_dir+0x114>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_setpin_dir+0x110>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret

000001c2 <DIO_pin_write>:
	}		
}

void DIO_pin_write(char port,char pin,char level)
{
	switch(port)
 1c2:	84 34       	cpi	r24, 0x44	; 68
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_pin_write+0x6>
 1c6:	71 c0       	rjmp	.+226    	; 0x2aa <DIO_pin_write+0xe8>
 1c8:	85 34       	cpi	r24, 0x45	; 69
 1ca:	48 f4       	brcc	.+18     	; 0x1de <DIO_pin_write+0x1c>
 1cc:	82 34       	cpi	r24, 0x42	; 66
 1ce:	99 f1       	breq	.+102    	; 0x236 <DIO_pin_write+0x74>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <DIO_pin_write+0x14>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <DIO_pin_write+0xae>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_pin_write+0x1a>
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <DIO_pin_write+0x120>
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <DIO_pin_write+0x3a>
 1de:	82 36       	cpi	r24, 0x62	; 98
 1e0:	51 f1       	breq	.+84     	; 0x236 <DIO_pin_write+0x74>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <DIO_pin_write+0x2c>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_pin_write+0x2a>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <DIO_pin_write+0x120>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <DIO_pin_write+0x3a>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_pin_write+0x32>
 1f2:	3e c0       	rjmp	.+124    	; 0x270 <DIO_pin_write+0xae>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_pin_write+0x38>
 1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <DIO_pin_write+0x120>
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <DIO_pin_write+0xe8>
	{
		case 'A':
		case 'a':
		if(level==1)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_pin_write+0x58>
		{
			SET_BIT(PORTA,pin);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_pin_write+0x4c>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_pin_write+0x48>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
 218:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTA,pin);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_pin_write+0x66>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_pin_write+0x62>
 22c:	ba 01       	movw	r22, r20
 22e:	60 95       	com	r22
 230:	62 23       	and	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(level==1)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <DIO_pin_write+0x92>
		{
			SET_BIT(PORTB,pin);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_pin_write+0x86>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_pin_write+0x82>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	68 bb       	out	0x18, r22	; 24
 252:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTB,pin);
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_pin_write+0xa0>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_pin_write+0x9c>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(level==1)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <DIO_pin_write+0xcc>
		{
			SET_BIT(PORTC,pin);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_pin_write+0xc0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_pin_write+0xbc>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	65 bb       	out	0x15, r22	; 21
 28c:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTC,pin);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_pin_write+0xda>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_pin_write+0xd6>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(level==1)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <DIO_pin_write+0x106>
		{
			SET_BIT(PORTD,pin);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_pin_write+0xfa>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_pin_write+0xf6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTD,pin);
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_pin_write+0x114>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_pin_write+0x110>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret

000002e4 <DIO_toggelpin>:
	}
}

void DIO_toggelpin(char port,char pin)
{
	switch(port)
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_toggelpin+0x6>
 2e8:	3d c0       	rjmp	.+122    	; 0x364 <DIO_toggelpin+0x80>
 2ea:	85 34       	cpi	r24, 0x45	; 69
 2ec:	40 f4       	brcc	.+16     	; 0x2fe <DIO_toggelpin+0x1a>
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	f9 f0       	breq	.+62     	; 0x330 <DIO_toggelpin+0x4c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	50 f5       	brcc	.+84     	; 0x34a <DIO_toggelpin+0x66>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_toggelpin+0x18>
 2fa:	40 c0       	rjmp	.+128    	; 0x37c <DIO_toggelpin+0x98>
 2fc:	0c c0       	rjmp	.+24     	; 0x316 <DIO_toggelpin+0x32>
 2fe:	82 36       	cpi	r24, 0x62	; 98
 300:	b9 f0       	breq	.+46     	; 0x330 <DIO_toggelpin+0x4c>
 302:	83 36       	cpi	r24, 0x63	; 99
 304:	18 f4       	brcc	.+6      	; 0x30c <DIO_toggelpin+0x28>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	c9 f5       	brne	.+114    	; 0x37c <DIO_toggelpin+0x98>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <DIO_toggelpin+0x32>
 30c:	83 36       	cpi	r24, 0x63	; 99
 30e:	e9 f0       	breq	.+58     	; 0x34a <DIO_toggelpin+0x66>
 310:	84 36       	cpi	r24, 0x64	; 100
 312:	a1 f5       	brne	.+104    	; 0x37c <DIO_toggelpin+0x98>
 314:	27 c0       	rjmp	.+78     	; 0x364 <DIO_toggelpin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_toggelpin+0x40>
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_toggelpin+0x3c>
 328:	ba 01       	movw	r22, r20
 32a:	62 27       	eor	r22, r18
 32c:	6b bb       	out	0x1b, r22	; 27
		break;
 32e:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);
 330:	28 b3       	in	r18, 0x18	; 24
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_toggelpin+0x5a>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_toggelpin+0x56>
 342:	ba 01       	movw	r22, r20
 344:	62 27       	eor	r22, r18
 346:	68 bb       	out	0x18, r22	; 24
		break;
 348:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);
 34a:	25 b3       	in	r18, 0x15	; 21
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_toggelpin+0x74>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_toggelpin+0x70>
 35c:	ba 01       	movw	r22, r20
 35e:	62 27       	eor	r22, r18
 360:	65 bb       	out	0x15, r22	; 21
		break;
 362:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ac 01       	movw	r20, r24
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_toggelpin+0x8e>
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_toggelpin+0x8a>
 376:	ba 01       	movw	r22, r20
 378:	62 27       	eor	r22, r18
 37a:	62 bb       	out	0x12, r22	; 18
 37c:	08 95       	ret

0000037e <DIO_pin_read>:
}

unsigned char DIO_pin_read(char port,char pin)
{
	int back_val=0;
	switch(port)
 37e:	84 34       	cpi	r24, 0x44	; 68
 380:	b1 f1       	breq	.+108    	; 0x3ee <DIO_pin_read+0x70>
 382:	85 34       	cpi	r24, 0x45	; 69
 384:	38 f4       	brcc	.+14     	; 0x394 <DIO_pin_read+0x16>
 386:	82 34       	cpi	r24, 0x42	; 66
 388:	e1 f0       	breq	.+56     	; 0x3c2 <DIO_pin_read+0x44>
 38a:	83 34       	cpi	r24, 0x43	; 67
 38c:	28 f5       	brcc	.+74     	; 0x3d8 <DIO_pin_read+0x5a>
 38e:	81 34       	cpi	r24, 0x41	; 65
 390:	c9 f5       	brne	.+114    	; 0x404 <DIO_pin_read+0x86>
 392:	0c c0       	rjmp	.+24     	; 0x3ac <DIO_pin_read+0x2e>
 394:	82 36       	cpi	r24, 0x62	; 98
 396:	a9 f0       	breq	.+42     	; 0x3c2 <DIO_pin_read+0x44>
 398:	83 36       	cpi	r24, 0x63	; 99
 39a:	18 f4       	brcc	.+6      	; 0x3a2 <DIO_pin_read+0x24>
 39c:	81 36       	cpi	r24, 0x61	; 97
 39e:	91 f5       	brne	.+100    	; 0x404 <DIO_pin_read+0x86>
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <DIO_pin_read+0x2e>
 3a2:	83 36       	cpi	r24, 0x63	; 99
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <DIO_pin_read+0x5a>
 3a6:	84 36       	cpi	r24, 0x64	; 100
 3a8:	69 f5       	brne	.+90     	; 0x404 <DIO_pin_read+0x86>
 3aa:	21 c0       	rjmp	.+66     	; 0x3ee <DIO_pin_read+0x70>
	{
		case 'A':
		case 'a':
		back_val=READ_BIT(PINA,pin);
 3ac:	29 b3       	in	r18, 0x19	; 25
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	c9 01       	movw	r24, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_pin_read+0x3a>
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_pin_read+0x36>
 3bc:	81 70       	andi	r24, 0x01	; 1
 3be:	90 70       	andi	r25, 0x00	; 0
		break;
 3c0:	08 95       	ret
		case 'B':
		case 'b':
		back_val=READ_BIT(PINB,pin);
 3c2:	26 b3       	in	r18, 0x16	; 22
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	c9 01       	movw	r24, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_pin_read+0x50>
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_pin_read+0x4c>
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	90 70       	andi	r25, 0x00	; 0
		break;
 3d6:	08 95       	ret
		case 'C':
		case 'c':
		back_val=READ_BIT(PINC,pin);
 3d8:	23 b3       	in	r18, 0x13	; 19
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	c9 01       	movw	r24, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_pin_read+0x66>
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_pin_read+0x62>
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	90 70       	andi	r25, 0x00	; 0
		break;
 3ec:	08 95       	ret
		case 'D':
		case 'd':
		back_val=READ_BIT(PIND,pin);
 3ee:	20 b3       	in	r18, 0x10	; 16
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_pin_read+0x7c>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_pin_read+0x78>
 3fe:	81 70       	andi	r24, 0x01	; 1
 400:	90 70       	andi	r25, 0x00	; 0
		break;
 402:	08 95       	ret
	}
}

unsigned char DIO_pin_read(char port,char pin)
{
	int back_val=0;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
		case 'd':
		back_val=READ_BIT(PIND,pin);
		break;
	}
	return back_val;//back_val return 1 or 0 
}
 408:	08 95       	ret

0000040a <DIO_set_portdir>:
void DIO_set_portdir(char port,char dir)
{
	switch(port)
 40a:	84 34       	cpi	r24, 0x44	; 68
 40c:	d9 f0       	breq	.+54     	; 0x444 <DIO_set_portdir+0x3a>
 40e:	85 34       	cpi	r24, 0x45	; 69
 410:	38 f4       	brcc	.+14     	; 0x420 <DIO_set_portdir+0x16>
 412:	82 34       	cpi	r24, 0x42	; 66
 414:	99 f0       	breq	.+38     	; 0x43c <DIO_set_portdir+0x32>
 416:	83 34       	cpi	r24, 0x43	; 67
 418:	98 f4       	brcc	.+38     	; 0x440 <DIO_set_portdir+0x36>
 41a:	81 34       	cpi	r24, 0x41	; 65
 41c:	a1 f4       	brne	.+40     	; 0x446 <DIO_set_portdir+0x3c>
 41e:	0c c0       	rjmp	.+24     	; 0x438 <DIO_set_portdir+0x2e>
 420:	82 36       	cpi	r24, 0x62	; 98
 422:	61 f0       	breq	.+24     	; 0x43c <DIO_set_portdir+0x32>
 424:	83 36       	cpi	r24, 0x63	; 99
 426:	18 f4       	brcc	.+6      	; 0x42e <DIO_set_portdir+0x24>
 428:	81 36       	cpi	r24, 0x61	; 97
 42a:	69 f4       	brne	.+26     	; 0x446 <DIO_set_portdir+0x3c>
 42c:	05 c0       	rjmp	.+10     	; 0x438 <DIO_set_portdir+0x2e>
 42e:	83 36       	cpi	r24, 0x63	; 99
 430:	39 f0       	breq	.+14     	; 0x440 <DIO_set_portdir+0x36>
 432:	84 36       	cpi	r24, 0x64	; 100
 434:	41 f4       	brne	.+16     	; 0x446 <DIO_set_portdir+0x3c>
 436:	06 c0       	rjmp	.+12     	; 0x444 <DIO_set_portdir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 438:	6a bb       	out	0x1a, r22	; 26
		break;
 43a:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 43c:	67 bb       	out	0x17, r22	; 23
		break;
 43e:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 440:	64 bb       	out	0x14, r22	; 20
		break;
 442:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 444:	61 bb       	out	0x11, r22	; 17
 446:	08 95       	ret

00000448 <DIO_read_portval>:
}

unsigned char DIO_read_portval(char port)
{
	int port_val;
	switch(port)
 448:	84 34       	cpi	r24, 0x44	; 68
 44a:	d9 f0       	breq	.+54     	; 0x482 <DIO_read_portval+0x3a>
 44c:	85 34       	cpi	r24, 0x45	; 69
 44e:	38 f4       	brcc	.+14     	; 0x45e <DIO_read_portval+0x16>
 450:	82 34       	cpi	r24, 0x42	; 66
 452:	99 f0       	breq	.+38     	; 0x47a <DIO_read_portval+0x32>
 454:	83 34       	cpi	r24, 0x43	; 67
 456:	98 f4       	brcc	.+38     	; 0x47e <DIO_read_portval+0x36>
 458:	81 34       	cpi	r24, 0x41	; 65
 45a:	a1 f4       	brne	.+40     	; 0x484 <DIO_read_portval+0x3c>
 45c:	0c c0       	rjmp	.+24     	; 0x476 <DIO_read_portval+0x2e>
 45e:	82 36       	cpi	r24, 0x62	; 98
 460:	61 f0       	breq	.+24     	; 0x47a <DIO_read_portval+0x32>
 462:	83 36       	cpi	r24, 0x63	; 99
 464:	18 f4       	brcc	.+6      	; 0x46c <DIO_read_portval+0x24>
 466:	81 36       	cpi	r24, 0x61	; 97
 468:	69 f4       	brne	.+26     	; 0x484 <DIO_read_portval+0x3c>
 46a:	05 c0       	rjmp	.+10     	; 0x476 <DIO_read_portval+0x2e>
 46c:	83 36       	cpi	r24, 0x63	; 99
 46e:	39 f0       	breq	.+14     	; 0x47e <DIO_read_portval+0x36>
 470:	84 36       	cpi	r24, 0x64	; 100
 472:	41 f4       	brne	.+16     	; 0x484 <DIO_read_portval+0x3c>
 474:	06 c0       	rjmp	.+12     	; 0x482 <DIO_read_portval+0x3a>
	{
		case 'A':
		case 'a':
		port_val=PINA;
 476:	99 b3       	in	r25, 0x19	; 25
		break;
 478:	05 c0       	rjmp	.+10     	; 0x484 <DIO_read_portval+0x3c>
		case 'B':
		case 'b':
		port_val=PINB;
 47a:	96 b3       	in	r25, 0x16	; 22
		break;
 47c:	03 c0       	rjmp	.+6      	; 0x484 <DIO_read_portval+0x3c>
		case 'C':
		case 'c':
		port_val=PINC;
 47e:	93 b3       	in	r25, 0x13	; 19
		break;
 480:	01 c0       	rjmp	.+2      	; 0x484 <DIO_read_portval+0x3c>
		case 'D':
		case 'd':
		port_val=PIND;
 482:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return port_val;
	
}
 484:	89 2f       	mov	r24, r25
 486:	08 95       	ret

00000488 <DIO_write_allport>:

void DIO_write_allport(char port,char val)
{
	switch(port)
 488:	84 34       	cpi	r24, 0x44	; 68
 48a:	d9 f0       	breq	.+54     	; 0x4c2 <DIO_write_allport+0x3a>
 48c:	85 34       	cpi	r24, 0x45	; 69
 48e:	38 f4       	brcc	.+14     	; 0x49e <DIO_write_allport+0x16>
 490:	82 34       	cpi	r24, 0x42	; 66
 492:	99 f0       	breq	.+38     	; 0x4ba <DIO_write_allport+0x32>
 494:	83 34       	cpi	r24, 0x43	; 67
 496:	98 f4       	brcc	.+38     	; 0x4be <DIO_write_allport+0x36>
 498:	81 34       	cpi	r24, 0x41	; 65
 49a:	a1 f4       	brne	.+40     	; 0x4c4 <DIO_write_allport+0x3c>
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <DIO_write_allport+0x2e>
 49e:	82 36       	cpi	r24, 0x62	; 98
 4a0:	61 f0       	breq	.+24     	; 0x4ba <DIO_write_allport+0x32>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	18 f4       	brcc	.+6      	; 0x4ac <DIO_write_allport+0x24>
 4a6:	81 36       	cpi	r24, 0x61	; 97
 4a8:	69 f4       	brne	.+26     	; 0x4c4 <DIO_write_allport+0x3c>
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <DIO_write_allport+0x2e>
 4ac:	83 36       	cpi	r24, 0x63	; 99
 4ae:	39 f0       	breq	.+14     	; 0x4be <DIO_write_allport+0x36>
 4b0:	84 36       	cpi	r24, 0x64	; 100
 4b2:	41 f4       	brne	.+16     	; 0x4c4 <DIO_write_allport+0x3c>
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <DIO_write_allport+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4b6:	6b bb       	out	0x1b, r22	; 27
		break;
 4b8:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4ba:	68 bb       	out	0x18, r22	; 24
		break;
 4bc:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4be:	65 bb       	out	0x15, r22	; 21
		break;
 4c0:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4c2:	62 bb       	out	0x12, r22	; 18
 4c4:	08 95       	ret

000004c6 <DIO_port_toggle>:
	}
}

void DIO_port_toggle(char port)
{
		switch(port)
 4c6:	84 34       	cpi	r24, 0x44	; 68
 4c8:	09 f1       	breq	.+66     	; 0x50c <DIO_port_toggle+0x46>
 4ca:	85 34       	cpi	r24, 0x45	; 69
 4cc:	38 f4       	brcc	.+14     	; 0x4dc <DIO_port_toggle+0x16>
 4ce:	82 34       	cpi	r24, 0x42	; 66
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <DIO_port_toggle+0x36>
 4d2:	83 34       	cpi	r24, 0x43	; 67
 4d4:	b8 f4       	brcc	.+46     	; 0x504 <DIO_port_toggle+0x3e>
 4d6:	81 34       	cpi	r24, 0x41	; 65
 4d8:	e1 f4       	brne	.+56     	; 0x512 <DIO_port_toggle+0x4c>
 4da:	0c c0       	rjmp	.+24     	; 0x4f4 <DIO_port_toggle+0x2e>
 4dc:	82 36       	cpi	r24, 0x62	; 98
 4de:	71 f0       	breq	.+28     	; 0x4fc <DIO_port_toggle+0x36>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	18 f4       	brcc	.+6      	; 0x4ea <DIO_port_toggle+0x24>
 4e4:	81 36       	cpi	r24, 0x61	; 97
 4e6:	a9 f4       	brne	.+42     	; 0x512 <DIO_port_toggle+0x4c>
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <DIO_port_toggle+0x2e>
 4ea:	83 36       	cpi	r24, 0x63	; 99
 4ec:	59 f0       	breq	.+22     	; 0x504 <DIO_port_toggle+0x3e>
 4ee:	84 36       	cpi	r24, 0x64	; 100
 4f0:	81 f4       	brne	.+32     	; 0x512 <DIO_port_toggle+0x4c>
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <DIO_port_toggle+0x46>
		{
			case 'A':
			case 'a':
			PORTA=~PORTA;
 4f4:	8b b3       	in	r24, 0x1b	; 27
 4f6:	80 95       	com	r24
 4f8:	8b bb       	out	0x1b, r24	; 27
			break;
 4fa:	08 95       	ret
			case 'B':
			case 'b':
			PORTB=~PORTB;
 4fc:	88 b3       	in	r24, 0x18	; 24
 4fe:	80 95       	com	r24
 500:	88 bb       	out	0x18, r24	; 24
			break;
 502:	08 95       	ret
			case 'C':
			case 'c':
			PORTC=~PORTC;
 504:	85 b3       	in	r24, 0x15	; 21
 506:	80 95       	com	r24
 508:	85 bb       	out	0x15, r24	; 21
			break;
 50a:	08 95       	ret
			case 'D':
			case 'd':
			PORTD=~PORTD;
 50c:	82 b3       	in	r24, 0x12	; 18
 50e:	80 95       	com	r24
 510:	82 bb       	out	0x12, r24	; 18
 512:	08 95       	ret

00000514 <DIO_connect_pullup>:
		}
}

void DIO_connect_pullup(char port,char pin,char val)
{
	switch(port)
 514:	84 34       	cpi	r24, 0x44	; 68
 516:	09 f4       	brne	.+2      	; 0x51a <DIO_connect_pullup+0x6>
 518:	71 c0       	rjmp	.+226    	; 0x5fc <DIO_connect_pullup+0xe8>
 51a:	85 34       	cpi	r24, 0x45	; 69
 51c:	48 f4       	brcc	.+18     	; 0x530 <DIO_connect_pullup+0x1c>
 51e:	82 34       	cpi	r24, 0x42	; 66
 520:	99 f1       	breq	.+102    	; 0x588 <DIO_connect_pullup+0x74>
 522:	83 34       	cpi	r24, 0x43	; 67
 524:	08 f0       	brcs	.+2      	; 0x528 <DIO_connect_pullup+0x14>
 526:	4d c0       	rjmp	.+154    	; 0x5c2 <DIO_connect_pullup+0xae>
 528:	81 34       	cpi	r24, 0x41	; 65
 52a:	09 f0       	breq	.+2      	; 0x52e <DIO_connect_pullup+0x1a>
 52c:	83 c0       	rjmp	.+262    	; 0x634 <DIO_connect_pullup+0x120>
 52e:	0f c0       	rjmp	.+30     	; 0x54e <DIO_connect_pullup+0x3a>
 530:	82 36       	cpi	r24, 0x62	; 98
 532:	51 f1       	breq	.+84     	; 0x588 <DIO_connect_pullup+0x74>
 534:	83 36       	cpi	r24, 0x63	; 99
 536:	20 f4       	brcc	.+8      	; 0x540 <DIO_connect_pullup+0x2c>
 538:	81 36       	cpi	r24, 0x61	; 97
 53a:	09 f0       	breq	.+2      	; 0x53e <DIO_connect_pullup+0x2a>
 53c:	7b c0       	rjmp	.+246    	; 0x634 <DIO_connect_pullup+0x120>
 53e:	07 c0       	rjmp	.+14     	; 0x54e <DIO_connect_pullup+0x3a>
 540:	83 36       	cpi	r24, 0x63	; 99
 542:	09 f4       	brne	.+2      	; 0x546 <DIO_connect_pullup+0x32>
 544:	3e c0       	rjmp	.+124    	; 0x5c2 <DIO_connect_pullup+0xae>
 546:	84 36       	cpi	r24, 0x64	; 100
 548:	09 f0       	breq	.+2      	; 0x54c <DIO_connect_pullup+0x38>
 54a:	74 c0       	rjmp	.+232    	; 0x634 <DIO_connect_pullup+0x120>
 54c:	57 c0       	rjmp	.+174    	; 0x5fc <DIO_connect_pullup+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	69 f4       	brne	.+26     	; 0x56c <DIO_connect_pullup+0x58>
		{
			SET_BIT(PORTA,pin);
 552:	2b b3       	in	r18, 0x1b	; 27
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	ac 01       	movw	r20, r24
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_connect_pullup+0x4c>
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_connect_pullup+0x48>
 564:	ba 01       	movw	r22, r20
 566:	62 2b       	or	r22, r18
 568:	6b bb       	out	0x1b, r22	; 27
 56a:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTA,pin);
 56c:	2b b3       	in	r18, 0x1b	; 27
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	ac 01       	movw	r20, r24
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_connect_pullup+0x66>
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_connect_pullup+0x62>
 57e:	ba 01       	movw	r22, r20
 580:	60 95       	com	r22
 582:	62 23       	and	r22, r18
 584:	6b bb       	out	0x1b, r22	; 27
 586:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 588:	41 30       	cpi	r20, 0x01	; 1
 58a:	69 f4       	brne	.+26     	; 0x5a6 <DIO_connect_pullup+0x92>
		{
			SET_BIT(PORTB,pin);
 58c:	28 b3       	in	r18, 0x18	; 24
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	ac 01       	movw	r20, r24
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_connect_pullup+0x86>
 596:	44 0f       	add	r20, r20
 598:	55 1f       	adc	r21, r21
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_connect_pullup+0x82>
 59e:	ba 01       	movw	r22, r20
 5a0:	62 2b       	or	r22, r18
 5a2:	68 bb       	out	0x18, r22	; 24
 5a4:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTB,pin);
 5a6:	28 b3       	in	r18, 0x18	; 24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	ac 01       	movw	r20, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_connect_pullup+0xa0>
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_connect_pullup+0x9c>
 5b8:	ba 01       	movw	r22, r20
 5ba:	60 95       	com	r22
 5bc:	62 23       	and	r22, r18
 5be:	68 bb       	out	0x18, r22	; 24
 5c0:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	69 f4       	brne	.+26     	; 0x5e0 <DIO_connect_pullup+0xcc>
		{
			SET_BIT(PORTC,pin);
 5c6:	25 b3       	in	r18, 0x15	; 21
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	ac 01       	movw	r20, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_connect_pullup+0xc0>
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_connect_pullup+0xbc>
 5d8:	ba 01       	movw	r22, r20
 5da:	62 2b       	or	r22, r18
 5dc:	65 bb       	out	0x15, r22	; 21
 5de:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTC,pin);
 5e0:	25 b3       	in	r18, 0x15	; 21
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	ac 01       	movw	r20, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_connect_pullup+0xda>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_connect_pullup+0xd6>
 5f2:	ba 01       	movw	r22, r20
 5f4:	60 95       	com	r22
 5f6:	62 23       	and	r22, r18
 5f8:	65 bb       	out	0x15, r22	; 21
 5fa:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 5fc:	41 30       	cpi	r20, 0x01	; 1
 5fe:	69 f4       	brne	.+26     	; 0x61a <DIO_connect_pullup+0x106>
		{
			SET_BIT(PORTD,pin);
 600:	22 b3       	in	r18, 0x12	; 18
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	ac 01       	movw	r20, r24
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_connect_pullup+0xfa>
 60a:	44 0f       	add	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_connect_pullup+0xf6>
 612:	ba 01       	movw	r22, r20
 614:	62 2b       	or	r22, r18
 616:	62 bb       	out	0x12, r22	; 18
 618:	08 95       	ret
		}
		else
		{
			CLC_BIT(PORTD,pin);
 61a:	22 b3       	in	r18, 0x12	; 18
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	ac 01       	movw	r20, r24
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_connect_pullup+0x114>
 624:	44 0f       	add	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_connect_pullup+0x110>
 62c:	ba 01       	movw	r22, r20
 62e:	60 95       	com	r22
 630:	62 23       	and	r22, r18
 632:	62 bb       	out	0x12, r22	; 18
 634:	08 95       	ret

00000636 <write_lownibble>:
		break;
	}
}

void write_lownibble(char port,char val)
{
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	c8 2f       	mov	r28, r24
 63c:	d6 2f       	mov	r29, r22
	DIO_pin_write(port,0,READ_BIT(val,0));
 63e:	46 2f       	mov	r20, r22
 640:	41 70       	andi	r20, 0x01	; 1
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,1,READ_BIT(val,1));
 648:	4d 2f       	mov	r20, r29
 64a:	46 95       	lsr	r20
 64c:	41 70       	andi	r20, 0x01	; 1
 64e:	8c 2f       	mov	r24, r28
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,2,READ_BIT(val,2));
 656:	4d 2f       	mov	r20, r29
 658:	46 95       	lsr	r20
 65a:	46 95       	lsr	r20
 65c:	41 70       	andi	r20, 0x01	; 1
 65e:	8c 2f       	mov	r24, r28
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,3,READ_BIT(val,3));
 666:	d6 95       	lsr	r29
 668:	d6 95       	lsr	r29
 66a:	d6 95       	lsr	r29
 66c:	4d 2f       	mov	r20, r29
 66e:	41 70       	andi	r20, 0x01	; 1
 670:	8c 2f       	mov	r24, r28
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <write_highnibble>:

void write_highnibble(char port,char val)
{
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	c8 2f       	mov	r28, r24
 684:	d6 2f       	mov	r29, r22
	DIO_pin_write(port,4,READ_BIT(val,0));
 686:	46 2f       	mov	r20, r22
 688:	41 70       	andi	r20, 0x01	; 1
 68a:	64 e0       	ldi	r22, 0x04	; 4
 68c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,5,READ_BIT(val,1));
 690:	4d 2f       	mov	r20, r29
 692:	46 95       	lsr	r20
 694:	41 70       	andi	r20, 0x01	; 1
 696:	8c 2f       	mov	r24, r28
 698:	65 e0       	ldi	r22, 0x05	; 5
 69a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,6,READ_BIT(val,2));
 69e:	4d 2f       	mov	r20, r29
 6a0:	46 95       	lsr	r20
 6a2:	46 95       	lsr	r20
 6a4:	41 70       	andi	r20, 0x01	; 1
 6a6:	8c 2f       	mov	r24, r28
 6a8:	66 e0       	ldi	r22, 0x06	; 6
 6aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
	DIO_pin_write(port,7,READ_BIT(val,3));
 6ae:	d6 95       	lsr	r29
 6b0:	d6 95       	lsr	r29
 6b2:	d6 95       	lsr	r29
 6b4:	4d 2f       	mov	r20, r29
 6b6:	41 70       	andi	r20, 0x01	; 1
 6b8:	8c 2f       	mov	r24, r28
 6ba:	67 e0       	ldi	r22, 0x07	; 7
 6bc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <led_inti>:
 */ 
#include "DIO.h"

void led_inti(char port,char pin)
{
	DIO_setpin_dir(port,pin,1);
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_setpin_dir>
}
 6cc:	08 95       	ret

000006ce <led_on>:

void led_on(char port,char pin)
{
	DIO_pin_write(port,pin,1);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
}
 6d4:	08 95       	ret

000006d6 <led_off>:

void led_off(char port,char pin)
{
	DIO_pin_write(port,pin,0);
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_pin_write>
}
 6dc:	08 95       	ret

000006de <led_tog>:

void led_tog(char port,char pin)
{
	DIO_toggelpin(port,pin);
 6de:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_toggelpin>
}
 6e2:	08 95       	ret

000006e4 <led_status>:

char led_status(char port,char pin)
{
	char status;
	status=DIO_pin_read(port,pin);
 6e4:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_pin_read>
	return status;
 6e8:	08 95       	ret

000006ea <main>:
#include "button.h"
#include "bitmask.h"
#include <avr/interrupt.h>
int main(void)
{
	led_inti('b',0);//led for ISR INT0
 6ea:	82 e6       	ldi	r24, 0x62	; 98
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	0e 94 63 03 	call	0x6c6	; 0x6c6 <led_inti>
	led_inti('b',1);//led for ISR INT1
 6f2:	82 e6       	ldi	r24, 0x62	; 98
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <led_inti>
	led_inti('b',3);//led for ISR INT2
 6fa:	82 e6       	ldi	r24, 0x62	; 98
 6fc:	63 e0       	ldi	r22, 0x03	; 3
 6fe:	0e 94 63 03 	call	0x6c6	; 0x6c6 <led_inti>
	button_inti('d',2);//button for ISR INT0
 702:	84 e6       	ldi	r24, 0x64	; 100
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	62 e0       	ldi	r22, 0x02	; 2
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	0e 94 49 00 	call	0x92	; 0x92 <button_inti>
	button_inti('d',3);//button for ISR INT1
 70e:	84 e6       	ldi	r24, 0x64	; 100
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	63 e0       	ldi	r22, 0x03	; 3
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	0e 94 49 00 	call	0x92	; 0x92 <button_inti>
	button_inti('b',2);//button for ISR INT2
 71a:	82 e6       	ldi	r24, 0x62	; 98
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	0e 94 49 00 	call	0x92	; 0x92 <button_inti>
	sei();//to set interrupt bit (equal to set_bit(SREG,7)
 726:	78 94       	sei
	
	SET_BIT(GICR,INT0);//to enable INT0
 728:	8b b7       	in	r24, 0x3b	; 59
 72a:	80 64       	ori	r24, 0x40	; 64
 72c:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT1);//to enable INT1
 72e:	8b b7       	in	r24, 0x3b	; 59
 730:	80 68       	ori	r24, 0x80	; 128
 732:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT2);//to enable INT2
 734:	8b b7       	in	r24, 0x3b	; 59
 736:	80 62       	ori	r24, 0x20	; 32
 738:	8b bf       	out	0x3b, r24	; 59
	
	/* to set action (rising mode)for INT0 */
	SET_BIT(MCUCR,0);//equal to set_BIT(MCUCR,ISC00);
 73a:	85 b7       	in	r24, 0x35	; 53
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);//equal to set_BIT(MCUCR,ISC01);
 740:	85 b7       	in	r24, 0x35	; 53
 742:	82 60       	ori	r24, 0x02	; 2
 744:	85 bf       	out	0x35, r24	; 53
	
	/* to set action (rising mode)for INT1 */
	SET_BIT(MCUCR,2);//equal to set_BIT(MCUCR,ISC00);
 746:	85 b7       	in	r24, 0x35	; 53
 748:	84 60       	ori	r24, 0x04	; 4
 74a:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);//equal to set_BIT(MCUCR,ISC01);
 74c:	85 b7       	in	r24, 0x35	; 53
 74e:	88 60       	ori	r24, 0x08	; 8
 750:	85 bf       	out	0x35, r24	; 53
	
	/* to set action (rising mode)for INT0 */
	SET_BIT(MCUCSR,6);//equal to set_BIT(MCUCSR,ISC2);
 752:	84 b7       	in	r24, 0x34	; 52
 754:	80 64       	ori	r24, 0x40	; 64
 756:	84 bf       	out	0x34, r24	; 52
	
	while(1)
	{
		led_off('b',0);
 758:	82 e6       	ldi	r24, 0x62	; 98
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <led_off>
		led_off('b',1);
 760:	82 e6       	ldi	r24, 0x62	; 98
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <led_off>
		led_off('b',3);
 768:	82 e6       	ldi	r24, 0x62	; 98
 76a:	63 e0       	ldi	r22, 0x03	; 3
 76c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <led_off>
 770:	f3 cf       	rjmp	.-26     	; 0x758 <main+0x6e>

00000772 <__vector_1>:
}



ISR (INT0_vect)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
	sei();
 794:	78 94       	sei
	CLC_BIT(GICR,INT1);//to disable INT1
 796:	8b b7       	in	r24, 0x3b	; 59
 798:	8f 77       	andi	r24, 0x7F	; 127
 79a:	8b bf       	out	0x3b, r24	; 59
	CLC_BIT(GICR,INT2);//to disable INT2
 79c:	8b b7       	in	r24, 0x3b	; 59
 79e:	8f 7d       	andi	r24, 0xDF	; 223
 7a0:	8b bf       	out	0x3b, r24	; 59
	led_on('b',0);
 7a2:	82 e6       	ldi	r24, 0x62	; 98
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	0e 94 67 03 	call	0x6ce	; 0x6ce <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	93 ed       	ldi	r25, 0xD3	; 211
 7ae:	a0 e3       	ldi	r26, 0x30	; 48
 7b0:	81 50       	subi	r24, 0x01	; 1
 7b2:	90 40       	sbci	r25, 0x00	; 0
 7b4:	a0 40       	sbci	r26, 0x00	; 0
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <__vector_1+0x3e>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <__vector_1+0x48>
 7ba:	00 00       	nop
	_delay_ms(2000);
	SET_BIT(GICR,INT1);//to enable INT1
 7bc:	8b b7       	in	r24, 0x3b	; 59
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT2);//to enable INT2
 7c2:	8b b7       	in	r24, 0x3b	; 59
 7c4:	80 62       	ori	r24, 0x20	; 32
 7c6:	8b bf       	out	0x3b, r24	; 59
	
}
 7c8:	ff 91       	pop	r31
 7ca:	ef 91       	pop	r30
 7cc:	bf 91       	pop	r27
 7ce:	af 91       	pop	r26
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	7f 91       	pop	r23
 7d6:	6f 91       	pop	r22
 7d8:	5f 91       	pop	r21
 7da:	4f 91       	pop	r20
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_2>:
ISR (INT1_vect)
{
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	2f 93       	push	r18
 7f6:	3f 93       	push	r19
 7f8:	4f 93       	push	r20
 7fa:	5f 93       	push	r21
 7fc:	6f 93       	push	r22
 7fe:	7f 93       	push	r23
 800:	8f 93       	push	r24
 802:	9f 93       	push	r25
 804:	af 93       	push	r26
 806:	bf 93       	push	r27
 808:	ef 93       	push	r30
 80a:	ff 93       	push	r31
	sei();
 80c:	78 94       	sei
	CLC_BIT(GICR,INT2);//to disable INT2
 80e:	8b b7       	in	r24, 0x3b	; 59
 810:	8f 7d       	andi	r24, 0xDF	; 223
 812:	8b bf       	out	0x3b, r24	; 59
	led_on('b',1);
 814:	82 e6       	ldi	r24, 0x62	; 98
 816:	61 e0       	ldi	r22, 0x01	; 1
 818:	0e 94 67 03 	call	0x6ce	; 0x6ce <led_on>
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	93 ed       	ldi	r25, 0xD3	; 211
 820:	a0 e3       	ldi	r26, 0x30	; 48
 822:	81 50       	subi	r24, 0x01	; 1
 824:	90 40       	sbci	r25, 0x00	; 0
 826:	a0 40       	sbci	r26, 0x00	; 0
 828:	e1 f7       	brne	.-8      	; 0x822 <__vector_2+0x38>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <__vector_2+0x42>
 82c:	00 00       	nop
	_delay_ms(2000);
	SET_BIT(GICR,INT2);//to enable INT2
 82e:	8b b7       	in	r24, 0x3b	; 59
 830:	80 62       	ori	r24, 0x20	; 32
 832:	8b bf       	out	0x3b, r24	; 59
}
 834:	ff 91       	pop	r31
 836:	ef 91       	pop	r30
 838:	bf 91       	pop	r27
 83a:	af 91       	pop	r26
 83c:	9f 91       	pop	r25
 83e:	8f 91       	pop	r24
 840:	7f 91       	pop	r23
 842:	6f 91       	pop	r22
 844:	5f 91       	pop	r21
 846:	4f 91       	pop	r20
 848:	3f 91       	pop	r19
 84a:	2f 91       	pop	r18
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__vector_3>:

ISR (INT2_vect)
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	4f 93       	push	r20
 866:	5f 93       	push	r21
 868:	6f 93       	push	r22
 86a:	7f 93       	push	r23
 86c:	8f 93       	push	r24
 86e:	9f 93       	push	r25
 870:	af 93       	push	r26
 872:	bf 93       	push	r27
 874:	ef 93       	push	r30
 876:	ff 93       	push	r31
	sei();
 878:	78 94       	sei
	led_on('b',3);
 87a:	82 e6       	ldi	r24, 0x62	; 98
 87c:	63 e0       	ldi	r22, 0x03	; 3
 87e:	0e 94 67 03 	call	0x6ce	; 0x6ce <led_on>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	93 ed       	ldi	r25, 0xD3	; 211
 886:	a0 e3       	ldi	r26, 0x30	; 48
 888:	81 50       	subi	r24, 0x01	; 1
 88a:	90 40       	sbci	r25, 0x00	; 0
 88c:	a0 40       	sbci	r26, 0x00	; 0
 88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
 890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
 892:	00 00       	nop
	_delay_ms(2000);
}
 894:	ff 91       	pop	r31
 896:	ef 91       	pop	r30
 898:	bf 91       	pop	r27
 89a:	af 91       	pop	r26
 89c:	9f 91       	pop	r25
 89e:	8f 91       	pop	r24
 8a0:	7f 91       	pop	r23
 8a2:	6f 91       	pop	r22
 8a4:	5f 91       	pop	r21
 8a6:	4f 91       	pop	r20
 8a8:	3f 91       	pop	r19
 8aa:	2f 91       	pop	r18
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	0f 90       	pop	r0
 8b2:	1f 90       	pop	r1
 8b4:	18 95       	reti

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
